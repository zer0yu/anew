name: Create release artifacts

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - build: linux-amd64
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - build: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - build: linux-arm
            os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          
          # macOS targets
          - build: macos-amd64
            os: macos-latest
            target: x86_64-apple-darwin
          - build: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
          
          # Windows targets
          - build: windows-amd64
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - build: windows-arm64
            os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Prepare release archive
        shell: bash
        run: |
          binary_name="anew"
          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.build }}"
          mkdir "$dirname"
          
          # Copy binary
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname/"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname/"
          fi
          
          # Copy documentation
          cp README.md LICENSE "$dirname/"
          
          # Create archive
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.ASSET }}
          generate_release_notes: true
